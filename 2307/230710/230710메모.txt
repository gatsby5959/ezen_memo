alter table attend add foreign key(at_std_num) references student(std_num);
alter table attend add foreign key(at_co_code) references student(co_code);




insert into student values
('2019160123','전봉준','컴퓨터공학과',2,64),
('2019456001','강길동','디자인',3,60),
('2020123001','강나래','화학공학',1,21),
('2020123020','박철수','화학공학',1,20),
('2020160001','강철수','컴퓨터공학',1,20),
('2020160002','나영희','컴퓨터공학',1,19);

insert into course values
('2020ipc001','컴퓨터개론','유관순',2,2,'화1A,1B,2A,2B'),
('2020ipc002','기초전기','이순신',3,4,'월1A,1B,2A목1A,1B,2A'),
('2020msc001','대학수학기초','홍길동',3,3,'월1A,1B,2A수1A,1B,2A'),
('2020msc002','프로그래밍일반','임꺽정',3,3,'월1A,1B,2A목1A,1B,2A');

insert into attend(at_std_num, at_co_code) values
('2020160001','2020msc001'),
('2020160002','2020msc001'),
('2019160123','2020msc002'),
('2019456001','2020msc002'),
('2020123001','2020ipc001'),
('2020123020','2020ipc001'),
('2019456001','2020ipc002'),
('2019160123','2020ipc002'),
('2020160001','2020msc002'),
('2020160002','2020msc002'),
('2019160123','2020msc001'),
('2019456001','2020msc001'),
('2020123001','2020msc001'),
('2020123020','2020msc001'),
('2019456001','2020msc002'),
('2019160123','2020msc002');


1. attend 테이블에 수강년도(at_year) = 2023변경
update attend at_year set = 2023;

2. 수강학기(at_term) : 1~8까지는 1, /나머지는 2
update attend set at_term = 1 where at_num <= 8;
update attend set at_term = 2 where at_num > 8;
3. at_mid(40) | at_final(40) | at_attend(10) | at_hw(10)
  1학기에 해당하는 1~8번 학생들의 점수를 채워주세요
update attend set at_mid = 30, at_final = 11, at_attend=9,  at_hw = 8 where at_num =1;
update attend set at_mid = 33, at_final = 13, at_attend=8,  at_hw = 10 where at_num =2;
update attend set at_mid = 39, at_final = 38, at_attend=8,  at_hw = 3 where at_num =3;
update attend set at_mid = 20, at_final = 33, at_attend=9,  at_hw = 4 where at_num =4;
update attend set at_mid = 30, at_final = 40, at_attend=8,  at_hw = 3 where at_num =5;
update attend set at_mid = 34, at_final = 33, at_attend=3,  at_hw = 2 where at_num =6;
update attend set at_mid = 20, at_final = 20, at_attend=4,  at_hw = 1 where at_num =7;
update attend set at_mid = 10, at_final = 10, at_attend=5,  at_hw = 9 where at_num =8;
1학기에 해당하는 1~8번 학생들의 점수를 채워주세요.

4. at_score =
모든 합이 > 90 A / >=80 B   />=70 C  / >= 60 D  /F 

 UPDATE attend 
     SET at_score = CASE
         WHEN at_mid+at_final+at_attend+at_hw+at_hw  >= 90 THEN 'A'
         WHEN at_mid+at_final+at_attend+at_hw+at_hw  >= 80 THEN 'B'
	WHEN at_mid+at_final+at_attend+at_hw+at_hw  >= 70 THEN 'C'
	WHEN at_mid+at_final+at_attend+at_hw+at_hw  >= 70 THEN 'D'
         ELSE 'F'
     END
where at_term= 1;


5. at_repetition 재수강여부는 at_score가 F이거나, at_attend가 3이하라면 재수강 여부 = y

 UPDATE attend 
     SET at_repetition = CASE
         WHEN at_score = 'F' THEN 'y'
         WHEN at_attend   <= 3 THEN 'y'
         ELSE 'n'
     END
where at_term = 1;

 UPDATE attend 
     SET at_repetition =
	if(at_score='F' or at_attend <=3, 'y', 'n') 
where at_term = '1';



- 6. score 별 인원수 집계

select at_score , count(at_score)  from attend group by at_score having at_score is not null order by at_score ;

A를 받은 학생 명단(학번, 이름) => student



-----------------------------
join 예제
select a.at_std_num, s.std_name from attend a join student s
on a.at_std_num= s.std_num
where a.at_score = 'A';

F를 받은 학생명단(학번, 이름, 학과)
select a.at_std_num, s.std_name, s.std_major from attend a join student s
on a.at_std_num= s.std_num
where a.at_score = 'F';

update attend set at_repetition = 'n', at_score = null where at_term = 2;


재수강자 명단 (학번, 이름, 학과, 재수강여부)
select a.at_std_num, s.std_name, s.std_major , a.at_repetition
from attend a join student s
on a.at_std_num= s.std_num
where a.at_repetition = 'y';

A학점 학생들의 (a학번, b이름, c과목) = > 테이블 3개 쪼인해야함
쌤버전
select s.std_num, s.std_name, c.co_name from attend a
join student s on a.at_std_num = s.std_num
join course c on a.at_co_code = c.co_code
where a.at_score = 'A';

성훈버전
select a.at_std_num, s.std_name, c.co_name
from  attend a 
join   student s
join   course c
on     a.at_std_num = s.std_num 
and   a.at_co_code = c.co_code
where a.at_score = "A";




A학점 학생들의 (학번, 이름, 과목, 성적)
쌤버전
select s.std_num, std_name, c.co_name,
(a.at_mid + a.at_final+ a.at_attend+a.at_hw) as '성적'
from attend a
join student s on a.at_std_num = s.std_num
join course c on a.at_co_code = c.co_code
where a.at_score = 'A';



SELECT a.at_std_num, s.std_name, c.co_name, 
SUM(a.at_mid + a.at_final + a.at_attend) AS total
FROM attend a
join student s 
join course c
on a.at_std_num = s.std_num 
and a.at_co_code = c.co_code
WHERE a.at_score = 'A'
GROUP BY a.at_std_num, s.std_name, c.co_name
HAVING total > 0;



1. 과목(co_name)별 중간, 기말, 출석, 과제 합계
-과목별 오름차순
SELECT c.co_name,
SUM(a.at_mid) as '중간', SUM(a.at_final) as '기말', SUM(a.at_attend) as '출석', SUM(a.at_hw)  as'과제'
FROM attend a
join student s 
join course c
on a.at_std_num = s.std_num 
and a.at_co_code = c.co_code
GROUP BY  a.at_co_code
order by c.co_name;

2. 학점별 중간, 기말, 출석, 과제 평균
학점별 오름차순 정렬
SELECT a.at_score,
round(AVG(a.at_mid),1) as '중간', 
round(AVG(a.at_final),1) as '기말', 
round(AVG(a.at_attend),1) as '출석', 
round(AVG(a.at_hw),1)  as '과제'
FROM attend a
join student s 
join course c
on a.at_std_num = s.std_num 
and a.at_co_code = c.co_code
GROUP BY  a.at_score
having at_score is not null
order by a.at_score;



3. 강철수가 수강하고 있는 과목들의 이름, 교수명 출력
select c.co_name, c.co_professor
FROM attend a
join student s on a.at_std_num = s.std_num 
join course c on a.at_co_code = c.co_code
where s.std_name = '강철수';





과제
1.학번이 2020으로 시작하는 학생들의
학번, 이름, 학과를 출력
select *
FROM attend a
join student s on a.at_std_num = s.std_num 
join course c on a.at_co_code = c.co_code
where substr(a.at_std_num,1,4) = 2020;

select a.at_std_num , s.std_name, s.std_major
from attend a
join student s on a.at_std_num=s.std_num
join course c on a.at_co_code=c.co_code
where s.std_num like '2020%';

2. 프로그래밍 일반 과목을 듣는 학생 명단
학번, 이름, 학과를 출력
select a.at_std_num , s.std_name, s.std_major
from attend a
join student s on a.at_std_num=s.std_num
join course c on a.at_co_code=c.co_code
where c.co_name like '프로그래밍일반';



3. 홍길동 교수가 강의하는 과목을 듣는 학생 명단
select a.at_std_num as '학번' , s.std_name '이름', s.std_major '학과', c.co_name '수강과목명', c.co_professor '담당교수'
from attend a
join student s on a.at_std_num=s.std_num
join course c on a.at_co_code=c.co_code
where c.co_professor = '홍길동';

학번, 이름, 학과, 수강과목, 담당교수


4. 전봉준이 획득한 학점(co_point) 합계 => 2학기는 미포함.
select SUM(c.co_point) as '전봉준이 획득한 학점'
from attend a
join student s on a.at_std_num=s.std_num
join course c on a.at_co_code=c.co_code
where s.std_name = '전봉준';



5. 재수강자 점수합계(중간+기말+출석+과제)

select a.at_term + a.at_mid + a.at_final + a.at_attend + a.at_hw, s.std_name
from attend a
join student s on a.at_std_num=s.std_num
join course c on a.at_co_code=c.co_code
where a.at_repetition = 'y';


insert into student values('2020160003','김순이','컴퓨터공학',1,25);
insert into student values('2020160004','홍순길','디자인',1,20);
student 값에 추가하고, 조인 후 수강하고 있지 않은 학생 명단을 출력
select s.std_name , s.*
from attend a
right join student s on a.at_std_num=s.std_num
where a.at_num is null;




